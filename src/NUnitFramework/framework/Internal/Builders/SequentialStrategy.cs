// Copyright (c) Charlie Poole, Rob Prouse and Contributors. MIT License - see LICENSE.txt

using System.Collections;
using System.Collections.Generic;
using NUnit.Framework.Interfaces;

namespace NUnit.Framework.Internal.Builders
{
    /// <summary>
    /// SequentialStrategy creates test cases by using all of the
    /// parameter data sources in parallel, substituting <see langword="null"/>
    /// when any of them run out of data.
    /// </summary>
    public class SequentialStrategy : ICombiningStrategy
    {
        /// <summary>
        /// Gets the test cases generated by the CombiningStrategy.
        /// </summary>
        /// <returns>The test cases.</returns>
        public IEnumerable<ITestCaseData> GetTestCases(IEnumerable[] sources)
        {
            List<ITestCaseData> testCases = new();

            IEnumerator[] enumerators = new IEnumerator[sources.Length];
            for (int i = 0; i < sources.Length; i++)
                enumerators[i] = sources[i].GetEnumerator();

            for (; ;)
            {
                bool gotData = false;
                object?[] testdata = new object?[sources.Length];

                for (int i = 0; i < sources.Length; i++)
                {
                    if (enumerators[i].MoveNext())
                    {
                        testdata[i] = enumerators[i].Current;
                        gotData = true;
                    }
                    else
                    {
                        testdata[i] = null;
                    }
                }

                if (!gotData)
                    break;

                TestCaseParameters parms = new TestCaseParameters(testdata);
                testCases.Add(parms);
            }

            return testCases;
        }
    }
}
