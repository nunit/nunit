// Copyright (c) Charlie Poole, Rob Prouse and Contributors. MIT License - see LICENSE.txt

using System.Collections;
using System.Collections.Generic;
using NUnit.Framework.Interfaces;

namespace NUnit.Framework.Internal.Builders
{
    /// <summary>
    /// CombinatorialStrategy creates test cases by using all possible
    /// combinations of the parameter data.
    /// </summary>
    public class CombinatorialStrategy : ICombiningStrategy
    {
        /// <summary>
        /// Gets the test cases generated by the CombiningStrategy.
        /// </summary>
        /// <returns>The test cases.</returns>
        public IEnumerable<ITestCaseData> GetTestCases(IEnumerable[] sources)
        {
            List<ITestCaseData> testCases = new();
            IEnumerator[] enumerators = new IEnumerator[sources.Length];
            int index = -1;

            for (; ;)
            {
                while (++index < sources.Length)
                {
                    enumerators[index] = sources[index].GetEnumerator();
                    if (!enumerators[index].MoveNext())
                        return testCases;
                }

                object?[] testdata = new object?[sources.Length];

                for (int i = 0; i < sources.Length; i++)
                    testdata[i] = enumerators[i].Current;

                TestCaseParameters parms = new TestCaseParameters(testdata);
                testCases.Add(parms);

                index = sources.Length;

                while (--index >= 0 && !enumerators[index].MoveNext())
                    ;

                if (index < 0)
                    break;
            }

            return testCases;
        }
    }
}
