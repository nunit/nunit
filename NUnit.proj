<?xml version="1.0" encoding="utf-8"?>

<Project DefaultTargets="Build" InitialTargets="" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Region Define Properties -->

  <PropertyGroup Label="Common Properties">
    <ProjectName>$(MSBuildProjectName)</ProjectName>
    
    <PackageVersion Condition="'$(PackageVersion)' == ''">3.1.0</PackageVersion>
    <PackageModifier Condition="'$(PackageModifier)' == ''"></PackageModifier>
    <DisplayVersion Condition="'$(DisplayVersion)' == ''">3.1</DisplayVersion>
    
    <PackageName>$(ProjectName)-$(PackageVersion)$(PackageModifier)</PackageName>
    <PackageNameCF>$(ProjectName)CF-$(PackageVersion)$(PackageModifier)</PackageNameCF>
		<PackageNameSL>$(ProjectName)SL-$(PackageVersion)$(PackageModifier)</PackageNameSL>
  </PropertyGroup>

  <PropertyGroup Label="Platform-specific properties">
    <IsWindows Condition=" '$(OS)' == 'Windows_NT' ">true</IsWindows>
    <IsWindows Condition=" '$(OS)' != 'Windows_NT' ">false</IsWindows>
    <RemoveDir Condition="$(IsWindows)">rmdir /s /q</RemoveDir>
    <RemoveDir Condition="!$(IsWindows)">rm -rf</RemoveDir>
    <ManagedExeLauncher Condition="!$(IsWindows)">mono</ManagedExeLauncher>
  </PropertyGroup>

  <PropertyGroup Label="Project Directories">
    <ProjectBaseDir>$(MSBuildProjectDirectory)</ProjectBaseDir>
    <ProjectBuildDir>$(ProjectBaseDir)\bin</ProjectBuildDir>
    <ProjectImageDir>$(ProjectBaseDir)\images</ProjectImageDir>
    <ProjectPackageDir>$(ProjectBaseDir)\package</ProjectPackageDir>
    <ProjectSrcDir>$(ProjectBaseDir)\src</ProjectSrcDir>
    <FrameworkSrcDir>$(ProjectSrcDir)\NUnitFramework</FrameworkSrcDir>
    <EngineSrcDir>$(ProjectSrcDir)\NUnitEngine</EngineSrcDir>
    <AddinSrcDir>$(EngineSrcDir)\Addins</AddinSrcDir>
    <ConsoleSrcDir>$(ProjectSrcDir)\NUnitConsole</ConsoleSrcDir>
    <ProjectToolsDir>$(ProjectBaseDir)\tools</ProjectToolsDir>
    <PartCoverDir>$(ProjectToolsDir)\PartCover</PartCoverDir>
    <NuspecDirectory>$(ProjectBaseDir)\nuget</NuspecDirectory>
    <InstallDir>$(ProjectBaseDir)\install</InstallDir>
  </PropertyGroup>

  <PropertyGroup Label="Default Build Settings">
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <Framework Condition="'$(Framework)' == ''">net-4.5</Framework>
    <ConfigSuffix Condition=" '$(Configuration)' == 'Debug' ">-dbg</ConfigSuffix>
  </PropertyGroup>

  <PropertyGroup Label="Subdirectories">
    <ConfigurationBuildDir>$(ProjectBuildDir)\$(Configuration)</ConfigurationBuildDir>
    <FrameworkBuildDir>$(ConfigurationBuildDir)\$(Framework)</FrameworkBuildDir>
    <EngineBuildDir>$(ConfigurationBuildDir)</EngineBuildDir>
    <ConsoleBuildDir>$(ConfigurationBuildDir)</ConsoleBuildDir>
  </PropertyGroup>

  <PropertyGroup Label="Packaging Directories">
    <CurrentImageDir Condition="'$(CurrentImageDir)' == ''">$(ProjectImageDir)\$(PackageName)$(ConfigSuffix)</CurrentImageDir>
    <PackageBinDir>$(CurrentImageDir)\bin</PackageBinDir>
    <PackageDocDir>$(CurrentImageDir)\doc</PackageDocDir>
    <PackageSrcDir>$(CurrentImageDir)\src</PackageSrcDir>
    <PackageLibDir>$(CurrentImageDir)\lib</PackageLibDir>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Framework)'=='net-4.5'">
    <ProjectSuffix>4.5</ProjectSuffix>
    <Runtime>NET</Runtime>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Framework)'=='net-4.0'">
    <ProjectSuffix>4.0</ProjectSuffix>
    <Runtime>NET</Runtime>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Framework)'=='net-2.0'">
    <ProjectSuffix>2.0</ProjectSuffix>
    <Runtime>NET</Runtime>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Framework)'=='mono-4.5'">
    <ProjectSuffix>4.5</ProjectSuffix>
    <Runtime>mono</Runtime>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Framework)'=='mono-4.0'">
    <ProjectSuffix>4.0</ProjectSuffix>
    <Runtime>mono</Runtime>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Framework)'=='mono-2.0'">
    <ProjectSuffix>2.0</ProjectSuffix>
    <Runtime>mono</Runtime>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Framework)'=='netcf-3.5'">
    <ProjectSuffix>netcf-3.5</ProjectSuffix>
    <Runtime>netcf</Runtime>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Framework)'=='sl-5.0'">
    <ProjectSuffix>sl-5.0</ProjectSuffix>
    <Runtime>silverlight</Runtime>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Framework)'=='portable'">
    <ProjectSuffix>portable</ProjectSuffix>
    <Runtime>portable</Runtime>
  </PropertyGroup>

  <PropertyGroup Label="Properties for running tests">
    <TestOptions Condition="'$(TestOptions)' == ''"></TestOptions>
    <ManagedExeLauncher Condition="'$(Runtime)' == 'mono'">mono</ManagedExeLauncher>
    <ConsoleRunner>$(ConsoleBuildDir)\nunit3-console.exe</ConsoleRunner>
    <ResultDir>$(ConfigurationBuildDir)\Results</ResultDir>
    <ResultFormat Condition="'$(ResultFormat)' == ''">nunit3</ResultFormat>
    <ContinueOnFailure Condition="'$(ContinueOnFailure)' == ''">false</ContinueOnFailure>
  </PropertyGroup>

  <PropertyGroup Label="Properties for building NuGet packages">
    <NugetExecutable>$(ProjectToolsDir)\nuget.exe</NugetExecutable>
    <NugetVersion>$(PackageVersion)$(PackageModifier)$(ConfigSuffix)</NugetVersion>
  </PropertyGroup>

  <PropertyGroup>
      <MSBuildCommunityTasksPath>$(ProjectToolsDir)\msbuild</MSBuildCommunityTasksPath>
  </PropertyGroup>
  
  <Import Project="$(ProjectToolsDir)\msbuild\MSBuild.Community.Tasks.Targets" />
  
  <!-- End Region -->

  <!-- Region Dump Settings Target -->
  
  <Target Name="DumpSettings">
    <Message Text=" " />
    <Message Text="Platform-specific properties:" />
    <Message Text="  Running on '$(OS)' ('IsWindows' = $(IsWindows))" />
    <Message Text="  RemoveDir command: '$(RemoveDir)'" />
    <Message Text=" " />
    <Message Text="Project Directories:" />
    <Message Text="  Base:              $(ProjectBaseDir)" />
    <Message Text="  Build:             $(ProjectBuildDir)" />
    <Message Text="  Package:           $(ProjectPackageDir)" />
    <Message Text="  Source:            $(ProjectSrcDir)" />
    <Message Text="    Framework:       $(FrameworkSrcDir)" />
    <Message Text="    Engine:          $(EngineSrcDir)" />
    <Message Text="    Console:         $(ConsoleSrcDir)" />
    <Message Text="  Tools:             $(ProjectToolsDir)" />
    <Message Text="  NuSpecs:           $(NuspecDirectory)" />
    <Message Text=" " />
    <Message Text="Build Settings:" />
    <Message Text="  Configuration:     $(Configuration)" />
    <Message Text="  Current Framework: $(Framework)" />
    <Message Text="    Runtime:         $(Runtime)" />
    <Message Text="    Proj. suffix:    $(ProjectSuffix)" />
    <Message Text=" " />
    <Message Text="Test Settings:" />
    <Message Text="  Result Directory:  $(ResultDir)" />
    <Message Text="  Result Format:     $(ResultFormat)" />
    <Message Text="  ContinueOnFailure: $(ContinueOnFailure)" />
    <Message Text=" " />
    <Message Text="Output Directories:" />
    <Message Text="  Framework:         $(FrameworkBuildDir)" />
    <Message Text="  Engine:            $(EngineBuildDir)" />
    <Message Text="  Console:           $(ConsoleBuildDir)" />
    <Message Text=" " />
    <Message Text="Packaging" />
    <Message Text="  Name:              $(PackageName)" />
    <Message Text="  Version:           $(PackageVersion)" />
    <Message Text="  Work dir:          $(CurrentImageDir)" />
    <Message Text="    Bin:             $(PackageBinDir)" />
    <Message Text="    Source:          $(PackageSrcDir)" />
    <Message Text=" " />
    <Message Text="NuGet" />
    <Message Text="  Exe:               $(NugetExecutable)" />
    <Message Text="  Version:           $(NugetVersion)" />
    <Message Text=" " />
  </Target>
  
  <!-- End Region -->

  <!-- Region Clean Targets -->
  
  <Target Name="Clean" DependsOnTargets="CleanFramework;CleanEngine;CleanConsole" />

  <Target Name="CleanAll" DependsOnTargets="CleanAllFrameworks;CleanEngine;CleanConsole">
    <Exec Command="$(RemoveDir) $(ConfigurationBuildDir)" Condition="Exists('$(ConfigurationBuildDir)')" />
  </Target>

  <Target Name="CleanFramework" Label="Clean all framework projects for the current runtime and config">
    <MSBuild Targets="Clean" Projects="@(FrameworkProjects)" Properties="Configuration=$(Configuration); Platform=AnyCPU" />
    <Exec Command="$(RemoveDir) $(FrameworkBuildDir)" Condition="Exists('$(FrameworkBuildDir)')" />
  </Target>

    <Target Name="CleanAllFrameworks" Label="Clean all framework projects for the current config and all runtimes">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="CleanFramework" Properties="Framework=%(SupportedFrameworks.Identity)" ContinueOnError="true" />
    <Exec Command="$(RemoveDir) $(ConfigurationBuildDir)" Condition="Exists('$(ConfigurationBuildDir)')" />
    </Target>

  <Target Name="CleanEngine" Label="Clean all engine projects for the current config">
    <MSBuild Targets="Clean" Projects="@(EngineProjects)" Properties="Configuration=$(Configuration); Platform=AnyCPU" />
    <MSBuild Targets="Clean" Projects="$(EngineSrcDir)\mock-cpp-clr\mock-cpp-clr-x86.vcxproj"
       Properties="Configuration=$(Configuration); Platform=Win32"
       Condition="'$(Runtime)' == 'NET' And $(IsWindows)" />
    <MSBuild Targets="Clean" Projects="$(EngineSrcDir)\mock-cpp-clr\mock-cpp-clr-x64.vcxproj"
       Properties="Configuration=$(Configuration); Platform=x64"
       Condition="'$(Runtime)' == 'NET' And $(IsWindows)" />
  </Target>

  <Target Name="CleanConsole" Label="Clean all console runner projects for the current config">
    <MSBuild Targets="Clean" Projects="@(ConsoleProjects)" Properties="Configuration=$(Configuration); Platform=AnyCPU" />
  </Target>

  <!-- End Region -->
  
  <!-- Region Build Targets -->

  <Target Name="Build" Label="Build the framework, engine and console for the current config"
    DependsOnTargets="BuildFramework;BuildEngine;BuildConsole" />

  <Target Name="BuildAll" Label="Build all frameworks, engine and console for the current config" 
    DependsOnTargets="BuildAllFrameworks;BuildEngine;BuildConsole" />

  <Target Name="BuildAllFrameworks" Label="Build the framework for the current config and all runtimes">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="BuildFramework"
      Properties="Framework=%(SupportedFrameworks.Identity)" ContinueOnError="true" />
  </Target>

  <Target Name="BuildFramework" Label="Build the framework for the current config and runtime">
    <MSBuild Targets="Build" Projects="@(NUnitProjects)" 
      Properties="Configuration=$(Configuration); Platform=AnyCPU" />
  </Target>
  
  <Target Name="BuildEngine" Label="Build all engine projects for the current config">
    <MSBuild Targets="Build" Projects="@(EngineProjects)"
      Properties="Configuration=$(Configuration); Platform=AnyCPU" />
  </Target>

  <!-- This target is kept separate from the engine because it can't be built on some systems -->
  <Target Name="BuildCppTestFiles" Label="Build the C++ assemblies used in some engine tests">
    <MSBuild Targets="Build" Projects="$(EngineSrcDir)\mock-cpp-clr\mock-cpp-clr-x86.vcxproj" 
       Properties="Configuration=$(Configuration); Platform=Win32"
       Condition="'$(Runtime)' == 'NET' And $(IsWindows)" />
    <MSBuild Targets="Build" Projects="$(EngineSrcDir)\mock-cpp-clr\mock-cpp-clr-x64.vcxproj" 
       Properties="Configuration=$(Configuration); Platform=x64"
       Condition="'$(Runtime)' == 'NET' And $(IsWindows)" />
  </Target>

  <Target Name="BuildConsole" Label="Build all console projects for the current config">
    <MSBuild Targets="Build" Projects="@(ConsoleProjects)"
      Properties="Configuration=$(Configuration); Platform=AnyCPU" />
  </Target>
  
  <!-- End Region -->

  <!-- Region Test Targets -->

  <Target Name="TestAll" Label="Run tests for all framework builds, the engine and the console"
      DependsOnTargets="TestAllFrameworks;TestEngine;TestAddins;TestV2Driver;TestConsole" />
    
  <Target Name="Test" Label="Run tests for the current framework, engine and console"
      DependsOnTargets="TestFramework;TestEngine;TestAddins;TestV2Driver;TestConsole" />

  <Target Name="TestAllFrameworks"
      Label="Test the framework for the current config and all runtimes">
    
    <MSBuild Projects="$(MSBuildProjectFullPath)"
         Targets="TestFrameworkIfSupported;TestNUnitLiteIfSupported"
         Properties="Framework=%(SupportedFrameworks.Identity)"
         ContinueOnError="$(ContinueOnFailure)" />
    
  </Target>

  <Target Name="TestFrameworkIfSupported"
      Label="Run framework tests conditionally, for use by TestAllFrameworks">

    <CallTarget Targets="TestFramework"
          ContinueOnError="$(ContinueOnFailure)"
          Condition="'$(Runtime)' != 'netcf' And '$(Runtime)' != 'silverlight'" />

  </Target>

  <Target Name="TestNUnitLiteIfSupported"
      Label="Run NUnitLite tests conditionally, for use by TestAllFrameworks">

    <CallTarget Targets="TestNUnitLite"
          ContinueOnError="$(ContinueOnFailure)"
          Condition="'$(Runtime)' != 'netcf' And '$(Runtime)' != 'silverlight'" />

  </Target>

  <Target Name="TestFramework" DependsOnTargets="_CreateResultDir"
      Label="Run framework tests for a runtime without checking for errors">

    <Message Text="******************************************************************" />
    <Message Text="* Testing NUnitFramework $(Framework) - $(Configuration)" />
    <Message Text="******************************************************************" />

    <Error Condition="'$(Runtime)' == 'netcf' Or '$(Runtime)' == 'silverlight'"
      Text="The full NUnit framework cannot be tested under $(Runtime)" />

    <Exec Condition="'$(Runtime)' == 'portable'" 
        WorkingDirectory="$(ConsoleBuildDir)\$(Runtime)" 
        Command='$(ManagedExeLauncher) $(ConsoleBuildDir)\$(Runtime)\nunit.portable.tests.exe $(TestOptions)'
        ContinueOnError="$(ContinueOnFailure)" />

    <Exec Condition="'$(Runtime)' != 'portable'"
        WorkingDirectory="$(ConsoleBuildDir)"
        Command='$(ManagedExeLauncher) $(ConsoleRunner) $(Framework)/nunit.framework.tests.dll "-result:$(ResultDir)/NUnitFrameworkResult-$(Framework).xml;format=$(ResultFormat)" $(TestOptions)'
        ContinueOnError="$(ContinueOnFailure)" />

  </Target>

  <Target Name="TestNUnitLite" DependsOnTargets="_CreateResultDir"
          Label="Run tests of the NUnitLite runner">

    <Message Text="******************************************************************" />
    <Message Text="* Testing NUnitLite $(Framework) - $(Configuration)" />
    <Message Text="******************************************************************" />

    <Exec Condition="'$(Runtime)' != 'silverlight' AND '$(Runtime)' != 'portable' "
          WorkingDirectory="$(FrameworkBuildDir)"
          Command='$(ManagedExeLauncher) nunitlite.tests.exe "-result:$(ResultDir)/NUnitliteResult-$(Framework).xml;format=$(ResultFormat)" $(TestOptions)'
          ContinueOnError="$(ContinueOnFailure)" />

		<Exec Condition="'$(Runtime)' == 'portable'"
          WorkingDirectory="$(FrameworkBuildDir)"
          Command='$(ManagedExeLauncher) nunitlite.tests.exe $(TestOptions)'
          ContinueOnError="$(ContinueOnFailure)" />

  </Target>

  <Target Name="TestEngine"
      Label ="Run the engine tests"
      DependsOnTargets="_CreateResultDir">

    <Message Text="******************************************************************" />
    <Message Text="* Testing the NUnit Engine - $(Configuration)" />
    <Message Text="******************************************************************" />

    <Exec WorkingDirectory="$(EngineBuildDir)"
        Command='$(ManagedExeLauncher) $(ConsoleRunner) nunit.engine.tests.dll "-result:$(ResultDir)/EngineResult.xml;format=$(ResultFormat)" $(TestOptions)'
        ContinueOnError="$(ContinueOnFailure)"/>

  </Target>

  <Target Name="TestAddins"
      Label ="Run the addin tests"
      DependsOnTargets="_CreateResultDir">

    <Message Text="******************************************************************" />
    <Message Text="* Testing the Engine Addins - $(Configuration)" />
    <Message Text="******************************************************************" />

    <Exec WorkingDirectory="$(EngineBuildDir)"
        Command='$(ManagedExeLauncher) $(ConsoleRunner) addins/tests/addin-tests.dll "-result:$(ResultDir)/AddinResult.xml;format=$(ResultFormat)" $(TestOptions)'
        ContinueOnError="$(ContinueOnFailure)"/>

  </Target>

  <Target Name="TestV2Driver"
    Label = "Run tests of the NUnit V2 Driver"
    DependsOnTargets="_CreateResultDir">

    <Message Text="******************************************************************" />
    <Message Text="* Testing the NUnit V2 Driver - $(Configuration)" />
    <Message Text="******************************************************************" />
    
    <Exec WorkingDirectory="$(EngineBuildDir)"
      Command='$(ManagedExeLauncher) $(ConsoleRunner) addins/v2-tests/nunit.v2.driver.tests.dll "-result:$(ResultDir)/V2DriverResult.xml;format=$(ResultFormat)"  $(TestOptions)'
      ContinueOnError="$(ContinueOnFailure)"/>
    
  </Target>
  
  <Target Name="TestConsole"
      Label="Run the console tests"
      DependsOnTargets="_CreateResultDir">
    
    <Message Text="******************************************************************" />
    <Message Text="* Testing the Console Runner - $(Configuration)" />
    <Message Text="******************************************************************" />
    
    <Exec WorkingDirectory="$(ConsoleBuildDir)"
        Command='$(ManagedExeLauncher) $(ConsoleRunner) nunit3-console.tests.dll "-result:$(ResultDir)/ConsoleResult.xml;format=$(ResultFormat)" $(TestOptions)'
        ContinueOnError="$(ContinueOnFailure)" />
    
  </Target>
  
  <Target Name="_CreateResultDir">
    
    <MakeDir Directories="$(ResultDir)"  Condition="!Exists('$(ResultDir)')"/>
    
  </Target>
  
  <!-- End Region -->

  <!-- Region Coverage Targets -->

  <Target Name="TestCoverage">
    <CallTarget Targets="_NUnitCoverage" Condition="'$(Runtime)' != 'netcf'"></CallTarget>
  </Target>
  
  <Target Name="_NUnitCoverage">
    <Error Condition="'$(Runtime)' == 'netcf'" Text="The full NUnit framework cannot be tested under $(Runtime)"></Error>
    <Exec WorkingDirectory="$(FrameworkBuildDir)"
        Command='$(ManagedExeLauncher) $(PartCoverDir)\PartCover.exe --target "$(ConsoleRunner)" --target-args "$(Framework)/nunit.framework.tests.dll $(TestOptions)" --include [nunit.framework]* --output NUnitTestCoverage.xml'>
    </Exec>
  </Target>
  
  <!-- End Region -->
  
  <!-- Region Packaging Targets -->
  
  <!-- *********************************************************************** -->
  <!--                              WARNING                                    -->
  <!--                                                                         -->
  <!--   Packaging is decoupled from the Build by design. It's up to whoever   -->
  <!--   creates the package to first make sure that the build is up to date.  -->
  <!-- *********************************************************************** -->
  
  <Target Name="Package" Label="Packages the source code and standard binaries. Excludes CF and SilverLight."
    DependsOnTargets="@(AllPackages)">
  </Target>

  <Target Name="PackageSource" Label="Packages the source code as a zip" DependsOnTargets="_CreateProjectPackageDir">
    <Message Text="******************************************************************" />
    <Message Text="* Creating the source code package as $(PackageName)-src.zip)" />
    <Message Text="******************************************************************" />

    <Exec Command='git archive -o "$(ProjectPackageDir)\$(PackageName)-src.zip" HEAD' />

  </Target>

  <Target Name="PackageBinaries" Label="Packages the binaries as a zip" DependsOnTargets="_CreateImageIfNotPresent">
    <Message Text="******************************************************************" />
    <Message Text="* Creating the binary $(Configuration) package as $(PackageName)$(ConfigSuffix).zip" />
    <Message Text="******************************************************************" />

    <Zip Files="@(BinZipFiles)" WorkingDirectory="$(CurrentImageDir)"
         ZipFileName="$(ProjectPackageDir)\$(PackageName)$(ConfigSuffix).zip" />

  </Target>

  <Target Name="PackageNuGet" Label="Creates all NuGet packages" Condition="$(IsWindows)" DependsOnTargets="PackageNuGetNUnit;PackageNuGetNUnitLite;PackageNuGetConsole" />
  
  <Target Name="PackageNuGetNUnit" Label="Creates the NUnit Framework NuGet package"
      DependsOnTargets="_CreateImageIfNotPresent">

    <Message Text="******************************************************************" />
    <Message Text="* Creating the nunit Nuget $(Configuration) package" />
    <Message Text="******************************************************************" />

    <Exec WorkingDirectory="$(ProjectBaseDir)"
        Command="$(ManagedExeLauncher) &quot;$(NugetExecutable)&quot; pack $(NuspecDirectory)\nunit.nuspec -BasePath &quot;$(CurrentImageDir)&quot; -OutputDirectory &quot;$(ProjectPackageDir)&quot; -Properties version=$(NugetVersion)" />

  </Target>

  <Target Name="PackageNuGetNUnitLite" Label="Creates the NUnitlite NuGet package"
      DependsOnTargets="_CreateImageIfNotPresent">

    <Message Text="******************************************************************" />
    <Message Text="* Creating the nunitlite Nuget $(Configuration) package" />
    <Message Text="******************************************************************" />

    <Exec WorkingDirectory="$(ProjectBaseDir)"
        Command="$(ManagedExeLauncher) &quot;$(NugetExecutable)&quot; pack $(NuspecDirectory)\nunitlite.nuspec -BasePath &quot;$(CurrentImageDir)&quot; -OutputDirectory &quot;$(ProjectPackageDir)&quot; -Properties version=$(NugetVersion)" />

  </Target>

  <Target Name="PackageNuGetConsole" Label="Creates the NUnit.Console NuGet package"
      DependsOnTargets="_CreateImageIfNotPresent">
    <Message Text="******************************************************************" />
    <Message Text="* Creating the NUnit.Console Nuget $(Configuration) package" />
    <Message Text="******************************************************************" />

    <Exec WorkingDirectory="$(ProjectBaseDir)"
        Command="$(ManagedExeLauncher) &quot;$(NugetExecutable)&quot; pack $(NuspecDirectory)\nunit.console.nuspec -NoPackageAnalysis -BasePath &quot;$(CurrentImageDir)&quot; -OutputDirectory &quot;$(ProjectPackageDir)&quot; -Properties version=$(NugetVersion)" />

  </Target>

  <Target Name="PackageNuGetRunners" Label="Creates the NUnit.Runners NuGet package"
      DependsOnTargets="_CreateImageIfNotPresent">
    <Message Text="******************************************************************" />
    <Message Text="* Creating the NUnit.Runners Nuget $(Configuration) package" />
    <Message Text="******************************************************************" />

    <Exec WorkingDirectory="$(ProjectBaseDir)"
        Command="$(ManagedExeLauncher) &quot;$(NugetExecutable)&quot; pack $(NuspecDirectory)\nunit.runners.nuspec -NoPackageAnalysis -BasePath &quot;$(CurrentImageDir)&quot; -OutputDirectory &quot;$(ProjectPackageDir)&quot; -Properties version=$(NugetVersion)" />

  </Target>

  <Target Name="PackageNugetEngine" Label="Creates the NUnit.Engine NuGet package"
      DependsOnTargets="_CreateImageIfNotPresent">
    <Message Text="******************************************************************" />
    <Message Text="* Creating the NUnit.Engine Nuget $(Configuration) package" />
    <Message Text="******************************************************************" />

    <Exec WorkingDirectory="$(ProjectBaseDir)"
        Command="$(ManagedExeLauncher) &quot;$(NugetExecutable)&quot; pack $(NuspecDirectory)\nunit.engine.nuspec -NoPackageAnalysis -BasePath &quot;$(CurrentImageDir)&quot; -OutputDirectory &quot;$(ProjectPackageDir)&quot; -Properties version=$(NugetVersion)" />

  </Target>

  <Target Name="PackageMsi" Label="Creates the master MSI installer for NUnit"
      DependsOnTargets="_CreateImageIfNotPresent">
    <MSBuild Targets="Rebuild" Projects="$(InstallDir)\master\nunit.wixproj"
      Properties="Configuration=$(Configuration); Platform=x86; PackageVersion=$(PackageVersion)$(PackageModifier)$(ConfigSuffix); DisplayVersion=$(DisplayVersion); OutDir=$(ProjectPackageDir)\; InstallImage=$(CurrentImageDir)" />
  </Target>

  <Target Name="PackageFrameworkMsi" Label="Creates the MSI installer for the NUnit.Framework"
      DependsOnTargets="_CreateImageIfNotPresent">
    <MSBuild Targets="Rebuild" Projects="$(InstallDir)\framework\nunit-framework.wixproj"
      Properties="Configuration=$(Configuration); Platform=x86; PackageVersion=$(PackageVersion)$(PackageModifier)$(ConfigSuffix); DisplayVersion=$(DisplayVersion); OutDir=$(ProjectPackageDir)\; InstallImage=$(CurrentImageDir)" />
  </Target>

  <Target Name="PackageConsoleMsi" Label="Creates the MSI installer for the NUnit console runner and engine"
      DependsOnTargets="_CreateImageIfNotPresent">
    <MSBuild Targets="Rebuild" Projects="$(InstallDir)\runners\nunit-runners.wixproj"
      Properties="Configuration=$(Configuration); Platform=x86; PackageVersion=$(PackageVersion)$(PackageModifier)$(ConfigSuffix); DisplayVersion=$(DisplayVersion); OutDir=$(ProjectPackageDir)\; InstallImage=$(CurrentImageDir)" />
  </Target>

  <!-- Packaging for the Compact framework -->
  <Target Name="PackageCF" Label="Creates all packages for the compact framework"
    DependsOnTargets="PackageBinariesCF;PackageNuGetNUnitCF;PackageNuGetNUnitLiteCF" />

  <Target Name="PackageBinariesCF" Label="Packages the CF binaries as a zip" DependsOnTargets="_CreateImageIfNotPresent">
    <Message Text="******************************************************************" />
    <Message Text="* Creating the binary $(Configuration) package as $(PackageNameCF)$(ConfigSuffix).zip" />
    <Message Text="******************************************************************" />

    <Zip Files="@(CFBinZipFiles)" WorkingDirectory="$(CurrentImageDir)"
         ZipFileName="$(ProjectPackageDir)\$(PackageNameCF)$(ConfigSuffix).zip" />

  </Target>

  <Target Name="PackageNuGetNUnitCF" Label="Creates the NUnit Framework NuGet package for compact framework"
      DependsOnTargets="_CreateImageIfNotPresent">

    <Message Text="******************************************************************" />
    <Message Text="* Creating the nunit Nuget CF $(Configuration) package" />
    <Message Text="******************************************************************" />

    <Exec WorkingDirectory="$(ProjectBaseDir)"
        Command="$(ManagedExeLauncher) &quot;$(NugetExecutable)&quot; pack $(NuspecDirectory)\nunitcf.nuspec -BasePath &quot;$(CurrentImageDir)&quot; -OutputDirectory &quot;$(ProjectPackageDir)&quot; -Properties version=$(NugetVersion)" />

  </Target>

  <Target Name="PackageNuGetNUnitLiteCF" Label="Creates the NUnitlite NuGet package for compact framework"
      DependsOnTargets="_CreateImageIfNotPresent">

    <Message Text="******************************************************************" />
    <Message Text="* Creating the nunitlite Nuget CF $(Configuration) package" />
    <Message Text="******************************************************************" />

    <Exec WorkingDirectory="$(ProjectBaseDir)"
        Command="$(ManagedExeLauncher) &quot;$(NugetExecutable)&quot; pack $(NuspecDirectory)\nunitlitecf.nuspec -BasePath &quot;$(CurrentImageDir)&quot; -OutputDirectory &quot;$(ProjectPackageDir)&quot; -Properties version=$(NugetVersion)" />

  </Target>

	<!-- Packaging for SilverLight -->
	<Target Name="PackageSL" Label="Creates all packages for SilverLight"
    DependsOnTargets="PackageBinariesSL;PackageNuGetNUnitSL;PackageNuGetNUnitLiteSL" />

	<Target Name="PackageBinariesSL" Label="Packages the SilverLight binaries as a zip" DependsOnTargets="_CreateImageIfNotPresent">
		<Message Text="******************************************************************" />
		<Message Text="* Creating the binary $(Configuration) package as $(PackageNameSL)$(ConfigSuffix).zip" />
		<Message Text="******************************************************************" />

		<Zip Files="@(SLBinZipFiles)" WorkingDirectory="$(CurrentImageDir)"
         ZipFileName="$(ProjectPackageDir)\$(PackageNameSL)$(ConfigSuffix).zip" />

	</Target>

	<Target Name="PackageNuGetNUnitSL" Label="Creates the NUnit Framework NuGet package for SilverLight"
      DependsOnTargets="_CreateImageIfNotPresent">

		<Message Text="******************************************************************" />
		<Message Text="* Creating the nunit Nuget SilverLight $(Configuration) package" />
		<Message Text="******************************************************************" />

		<Exec WorkingDirectory="$(ProjectBaseDir)"
        Command="$(ManagedExeLauncher) &quot;$(NugetExecutable)&quot; pack $(NuspecDirectory)\nunitSL.nuspec -BasePath &quot;$(CurrentImageDir)&quot; -OutputDirectory &quot;$(ProjectPackageDir)&quot; -Properties version=$(NugetVersion)" />

	</Target>

	<Target Name="PackageNuGetNUnitLiteSL" Label="Creates the NUnitlite NuGet package for SilverLight"
      DependsOnTargets="_CreateImageIfNotPresent">

		<Message Text="******************************************************************" />
		<Message Text="* Creating the nunitlite Nuget SilverLight $(Configuration) package" />
		<Message Text="******************************************************************" />

		<Exec WorkingDirectory="$(ProjectBaseDir)"
        Command="$(ManagedExeLauncher) &quot;$(NugetExecutable)&quot; pack $(NuspecDirectory)\nunitliteSL.nuspec -BasePath &quot;$(CurrentImageDir)&quot; -OutputDirectory &quot;$(ProjectPackageDir)&quot; -Properties version=$(NugetVersion)" />

	</Target>

  <Target Name="CreateImage" DependsOnTargets="_CleanCurrentImageDir">

    <!-- Copy root txt files to root -->
    <Copy DestinationFolder="$(CurrentImageDir)" SourceFiles="@(RootFiles)" />

    <!-- Copy binaries to bin directory -->
    <Copy DestinationFiles="@(BinFiles->'$(CurrentImageDir)\bin\%(RecursiveDir)%(Filename)%(Extension)')" 
        SourceFiles="@(BinFiles)" />

  </Target>

  <Target Name="_CreateImageIfNotPresent">
    <CallTarget Targets="CreateImage" Condition="!Exists('$(CurrentImageDir)')"/>
  </Target>

  <Target Name="_CreateProjectPackageDir">
    <MakeDir Directories="$(ProjectPackageDir)"  Condition="!Exists('$(ProjectPackageDir)')"/>
  </Target>

  <Target Name="_CleanCurrentImageDir">
    <Exec Command="$(RemoveDir) $(CurrentImageDir)" Condition="Exists('$(CurrentImageDir)')" />
    <MakeDir Directories="$(CurrentImageDir)" />
  </Target>

  <!-- End Region -->
  
  <!-- Region Item Groups -->
                                       
  <ItemGroup Label ="Targets for Packaging">
    <AllPackages Include="PackageSource" />
    <AllPackages Include="PackageBinaries" />
    <AllPackages Include="PackageNuGet" Condition="$(IsWindows)" />
    <AllPackages Include="PackageMsi" Condition="$(IsWindows)" />
  </ItemGroup>

  <ItemGroup Label="MSI Installer Files">
    <InstallerFiles Include="$(ConfigurationBuildDir)\*.msi" />
  </ItemGroup>
  
  <ItemGroup Label="Files for packaging in root">
    <RootFiles Include="LICENSE.txt;NOTICES.txt;CHANGES.txt;nunit.ico" />
  </ItemGroup>

  <ItemGroup Label="Files for packaging in bin directory">
    <BinFiles Include="$(ConfigurationBuildDir)\**\*.dll" />
    <BinFiles Include="$(ConfigurationBuildDir)\**\*.exe" />
    <BinFiles Include="$(ConfigurationBuildDir)\**\*.config" />

    <BinFiles Include="$(ConfigurationBuildDir)\**\nunit.framework.xml" />
    <BinFiles Include="$(ConfigurationBuildDir)\**\nunit.engine.api.xml" />

    <BinFiles Include="$(ConfigurationBuildDir)\EngineTests.nunit" />
    <BinFiles Include="$(ConfigurationBuildDir)\ConsoleTests.nunit" />
    <BinFiles Include="$(ConfigurationBuildDir)\NUnit2TestResult.xsd" />
    <BinFiles Include="$(ConfigurationBuildDir)\TextSummary.xslt" />
    <BinFiles Include="$(ConfigurationBuildDir)\nunit.engine.addins" />
    <BinFiles Include="$(ConfigurationBuildDir)\nunit.engine.addin.xml" />

    <!-- Extra files for Silverlight build -->
    <BinFiles Include="$(ConfigurationBuildDir)\**\AppManifest.xaml" />
    <BinFiles Include="$(ConfigurationBuildDir)\**\nunit.framework.tests.xap" />
    <BinFiles Include="$(ConfigurationBuildDir)\**\nunit.framework.tests_TestPage.html" />

    <!-- Include pdp files for Debug -->
    <BinFiles Include="$(ConfigurationBuildDir)\**\*.pdb"
      Condition="'$(Configuration)' == 'Debug'" />
  </ItemGroup>

  <ItemGroup>
    <ZipFiles Include="*.*" />
  </ItemGroup>

  <ItemGroup>
    <BinZipFiles Include="$(CurrentImageDir)\*.*" />
    <BinZipFiles Include="$(CurrentImageDir)\bin\*.*" />
    <BinZipFiles Include="$(CurrentImageDir)\bin\addins\*.*" />
    <BinZipFiles Include="$(CurrentImageDir)\bin\addins\tests\*.*" />
    <BinZipFiles Include="$(CurrentImageDir)\bin\addins\v2-tests\*.*" />
    <BinZipFiles Include="$(CurrentImageDir)\bin\net-2.0\*.*" />
    <BinZipFiles Include="$(CurrentImageDir)\bin\net-4.0\*.*" />
    <BinZipFiles Include="$(CurrentImageDir)\bin\net-4.5\*.*" />
    <BinZipFiles Include="$(CurrentImageDir)\bin\portable\*.*" />
  </ItemGroup>

  <ItemGroup>
    <CFBinZipFiles Include="$(CurrentImageDir)\bin\netcf-3.5\*.*" />
  </ItemGroup>

	<ItemGroup>
		<SLBinZipFiles Include="$(CurrentImageDir)\bin\sl-5.0\*.*" />
	</ItemGroup>

  <ItemGroup Label="Supported Frameworks">
    <SupportedFrameworks Include="net-4.5" />
    <SupportedFrameworks Include="net-4.0" />
    <SupportedFrameworks Include="net-2.0" />
    <!--<SupportedFrameworks Condition="$(IsWindows)" Include="netcf-3.5" />-->
    <SupportedFrameworks Condition="$(IsWindows)" Include="sl-5.0" />
    <SupportedFrameworks Include="portable" />
  </ItemGroup>
  
  <ItemGroup Label="Projects for building the framework">
    <NUnitProjects Include="$(FrameworkSrcDir)\framework\nunit.framework-$(ProjectSuffix).csproj"></NUnitProjects>
    <NUnitProjects Include="$(FrameworkSrcDir)\nunitlite.runner\nunitlite.runner-$(ProjectSuffix).csproj"></NUnitProjects>
    <NUnitProjects Include="$(FrameworkSrcDir)\mock-assembly\mock-nunit-assembly-$(ProjectSuffix).csproj"
      Condition="'$(Runtime)' != 'netcf' And '$(Runtime)' != 'silverlight'"></NUnitProjects>
    <NUnitProjects Include="$(FrameworkSrcDir)\testdata\nunit.testdata-$(ProjectSuffix).csproj"></NUnitProjects>
		<NUnitProjects Include="$(FrameworkSrcDir)\nunit.portable.tests\nunit.portable.tests.csproj"
      Condition="'$(Runtime)' == 'portable'"></NUnitProjects>
    <NUnitProjects Include="$(FrameworkSrcDir)\slow-tests\slow-nunit-tests-$(ProjectSuffix).csproj"
      Condition="'$(Runtime)' != 'netcf' And '$(Runtime)' != 'silverlight' And '$(Runtime)' != 'portable'"></NUnitProjects>
    <NUnitProjects Include="$(FrameworkSrcDir)\tests\nunit.framework.tests-$(ProjectSuffix).csproj"></NUnitProjects>
    <NUnitProjects Include="$(FrameworkSrcDir)\nunitlite.tests\nunitlite.tests-$(ProjectSuffix).csproj"></NUnitProjects>
  </ItemGroup>
  
  <ItemGroup Label="Projects for building the engine">
    <!-- The engine and agent -->
    <EngineProjects Include="$(EngineSrcDir)\nunit.engine.api\nunit.engine.api.csproj" />
    <EngineProjects Include="$(EngineSrcDir)\nunit.engine\nunit.engine.csproj" />
    <EngineProjects Include="$(EngineSrcDir)\nunit-agent\nunit-agent.csproj" />
    <EngineProjects Include="$(EngineSrcDir)\nunit-agent\nunit-agent-x86.csproj" />

    <!-- Test Assemblies -->
    <EngineProjects Include="$(EngineSrcDir)\nunit.engine.tests\nunit.engine.tests.csproj" />  
    
    <!-- Addins -->
    <EngineProjects Include="$(AddinSrcDir)\nunit-project-loader\nunit-project-loader.csproj" />
    <EngineProjects Include="$(AddinSrcDir)\vs-project-loader\vs-project-loader.csproj" />
    <EngineProjects Include="$(AddinSrcDir)\nunit-v2-result-writer\nunit-v2-result-writer.csproj" />
    <EngineProjects Include="$(AddinSrcDir)\nunit.v2.driver\nunit.v2.driver.csproj" />

    <!-- Addin tests -->
    <EngineProjects Include="$(AddinSrcDir)\addin-tests\addin-tests.csproj" />
    <EngineProjects Include="$(AddinSrcDir)\nunit.v2.driver.tests\nunit.v2.driver.tests.csproj" />

  </ItemGroup>

  <ItemGroup Label="Projects for building the console runner">
    <ConsoleProjects Include="$(ConsoleSrcDir)\nunit3-console\nunit3-console.csproj" />
    <ConsoleProjects Include="$(ConsoleSrcDir)\nunit3-console.tests\nunit3-console.tests.csproj" />
  </ItemGroup>
  
  <!-- End Region -->
  
</Project>
